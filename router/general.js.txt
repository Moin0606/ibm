const express = require('express');
let books = require("./booksdb.js");
let isValid = require("./auth_users.js").isValid;
let users = require("./auth_users.js").users;
const public_users = express.Router();
const axios=require('axios')


public_users.post("/register", (req,res) => {
    const username = req.body.username;
    const password = req.body.password;
  
    if (username && password) {
      if (!isValid(username)) { 
        users.push({"username":username,"password":password});
        return res.status(200).json({message: "User successfully registred. Now you can login"});
      } else {
        return res.status(404).json({message: "User already exists!"});    
      }
    } 
    return res.status(404).json({message: "Unable to register user."});
  });

// Get the book list available in the shop
async function getBooksAsync() {
    try {
      const response = await axios.get('http://localhost:5000/'); 
  
    
      const books = response.data;
  
      console.log('List of Books:', books);
      return books;
    } catch (error) {
      console.error('Error fetching books:', error.message);
      throw error;
    }
  }
  
  // Call the function to get the list of books
  getBooksAsync()
    .then((books) => {
      // Handle the list of books as needed
      console.log('Handling books:', books);
    })
    .catch((error) => {
      // Handle errors if any
      console.error('Error in main function:', error.message);
    });

    function getBookDetailsByISBN(isbn) {
        return new Promise((resolve, reject) => {
          axios.get(`http://localhost:5000/isbn/${isbn}`) // Replace your-port with the actual port number
            .then(response => {
              // Assuming the response data contains the book details
              const bookDetails = response.data;
              resolve(bookDetails);
            })
            .catch(error => {
              reject(error);
            });
        });
      }
      
      // Function to get book details based on ISBN using async-await
      async function getBookDetailsByISBNAsync(isbn) {
        try {
          const response = await axios.get(`http://localhost:5000/isbn/${isbn}`); // Replace your-port with the actual port number
      
          // Assuming the response data contains the book details
          const bookDetails = response.data;
          return bookDetails;
        } catch (error) {
          throw error;
        }
      }
      
      // Example using Promise callbacks
      const isbnToSearchPromise = '2'; // Replace with the actual ISBN
      getBookDetailsByISBN(isbnToSearchPromise)
        .then(bookDetails => {
          console.log('Book Details using Promise callbacks:', bookDetails);
        })
        .catch(error => {
          console.error('Error in Promise callbacks:', error.message);
        });
      
      // Example using async-await
      const isbnToSearchAsync = '2'; // Replace with the actual ISBN
      getBookDetailsByISBNAsync(isbnToSearchAsync)
        .then(bookDetails => {
          console.log('Book Details using async-await:', bookDetails);
        })
        .catch(error => {
          console.error('Error in async-await:', error.message);
        });
  
        function getBookDetailsByAuthor(author) {
            return new Promise((resolve, reject) => {
              axios.get(`http://localhost:your-port/author/${author}`) // Replace your-port with the actual port number
                .then(response => {
                  // Assuming the response data contains the book details
                  const booksByAuthor = response.data;
                  resolve(booksByAuthor);
                })
                .catch(error => {
                  reject(error);
                });
            });
          }
          
          // Function to get book details based on author using async-await
          async function getBookDetailsByAuthorAsync(author) {
            try {
              const response = await axios.get(`http://localhost:5000/author/${author}`); // Replace your-port with the actual port number
          
             
              const booksByAuthor = response.data;
              return booksByAuthor;
            } catch (error) {
              throw error;
            }
          }
          
          // Example using Promise callbacks
          const authorToSearchPromise = 'Chinua Achebe'; 
          getBookDetailsByAuthor(authorToSearchPromise)
            .then(booksByAuthor => {
              console.log('Book Details by Author using Promise callbacks:', booksByAuthor);
            })
            .catch(error => {
              console.error('Error in Promise callbacks:', error.message);
            });
          
          // Example using async-await
          const authorToSearchAsync = 'Chinua Achebe'; 
          getBookDetailsByAuthorAsync(authorToSearchAsync)
            .then(booksByAuthor => {
              console.log('Book Details by Author using async-await:', booksByAuthor);
            })
            .catch(error => {
              console.error('Error in async-await:', error.message);
            });

        //Book detail by title name    
            
        function getBookDetailsByTitle(title) {
            return new Promise((resolve, reject) => {
              axios.get(`http://localhost:5000/title/${title}`) // Replace your-port with the actual port number
                .then(response => {
                  // Assuming the response data contains the book details
                  const booksByTitle = response.data;
                  resolve(booksByTitle);
                })
                .catch(error => {
                  reject(error);
                });
            });
          }
          
              
              // Function to get book details based on title using async-await
              async function getBookDetailsByTitleAsync(title) {
                try {
                  const response = await axios.get(`http://localhost:5000/title/${title}`); 
              
                 
                  const booksByTitle = response.data;
                  return booksByTitle;
                } catch (error) {
                  throw error;
                }
              }
              
              // Example using Promise callbacks
              const titleToSearchPromise = 'Things Fall Apart'; 
              getBookDetailsByTitle(titleToSearchPromise)
                .then(booksByTitle => {
                  console.log('Book Details by Title using Promise callbacks:', booksByTitle);
                })
                .catch(error => {
                  console.error('Error in Promise callbacks:', error.message);
                });
              
              // Example using async-await
              const titleToSearchAsync = 'Things Fall Apart'; 
              getBookDetailsByTitleAsync(titleToSearchAsync)
                .then(booksByTitle => {
                  console.log('Book Details by Title using async-await:', booksByTitle);
                })
                .catch(error => {
                  console.error('Error in async-await:', error.message);
                });

//  Get book review
public_users.get('/review/:isbn',function (req, res) {
    const isbnToSearch = parseInt(req.params.isbn);
  
    // Iterate over the books object and check if the ISBN matches
   
      if (books.hasOwnProperty(isbnToSearch) ) {
        const bookReviews = books[isbnToSearch].reviews || [];
        res.json({ isbn: isbnToSearch, reviews: bookReviews });
        return;
      }
    
  
    // If no book with the specified ISBN is found
    res.status(404).json({ message: 'Book not found with the specified ISBN' });
  });

module.exports.general = public_users;